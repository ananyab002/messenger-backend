name: Docker Compose CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Spring Boot image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/messenger-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.prod.yml << EOF
          version: '3.8'

          services:
            messenger-backend:
              image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/messenger-backend:latest
              ports:
                - "8080:8080"
              environment:
                SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/messenger?useSSL=false&allowPublicKeyRetrieval=true
                SPRING_DATASOURCE_USERNAME: root
                SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                SPRING_ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                SPRING_ELASTICSEARCH_REST_URIS: http://elasticsearch-container:9200
              depends_on:
                mysql-container:
                  condition: service_healthy
                elasticsearch-container:
                  condition: service_healthy

            mysql-container:
              image: mysql:8.0
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                MYSQL_DATABASE: messenger
                MYSQL_ROOT_HOST: '%'
              ports:
               - "3307:3306"
              volumes:
                - mysql-data:/var/lib/mysql
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
                interval: 10s
                timeout: 5s
                retries: 5

            elasticsearch-container:
              image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
              environment:
                - discovery.type=single-node
                - xpack.security.enabled=false
                - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
                - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
              ports:
               - "9200:9200"
              volumes:
                - elasticsearch-data:/usr/share/elasticsearch/data
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
                interval: 30s
                timeout: 10s
                retries: 5

          volumes:
            mysql-data:
            elasticsearch-data:
          EOF

      - name: Save docker-compose file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose.prod.yml
